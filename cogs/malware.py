from OTXv2 import OTXv2
import argparse
import hashlib
import requests
import json
import get_malicious
from discord import Embed

import IndicatorTypes

# Get a nested key from a dict, without having to do loads of ifs
def getValue(results, keys):
    if type(keys) is list and len(keys) > 0:

        if type(results) is dict:
            key = keys.pop(0)
            if key in results:
                return getValue(results[key], keys)
            else:
                return None
        else:
            if type(results) is list and len(results) > 0:
                return getValue(results[0], keys)
            else:
                return results
    else:
        return results

def hostname(otx, hostname):
    alerts = []
    result = otx.get_indicator_details_by_section(IndicatorTypes.HOSTNAME, hostname, 'general')

    # Return nothing if it's in the whitelist
    validation = getValue(result, ['validation'])
    if not validation:
        pulses = getValue(result, ['pulse_info', 'pulses'])
        if pulses:
            for pulse in pulses:
                if 'name' in pulse:
                    alerts.append('In pulse: ' + pulse['name'])

    result = otx.get_indicator_details_by_section(IndicatorTypes.DOMAIN, hostname, 'general')
    # Return nothing if it's in the whitelist
    validation = getValue(result, ['validation'])
    if not validation:
        pulses = getValue(result, ['pulse_info', 'pulses'])
        if pulses:
            for pulse in pulses:
                if 'name' in pulse:
                    alerts.append('In pulse: ' + pulse['name'])


    return alerts


def ip(otx, ip):
    alerts = []
    result = otx.get_indicator_details_by_section(IndicatorTypes.IPv4, ip, 'general')

    # Return nothing if it's in the whitelist
    validation = getValue(result, ['validation'])
    if not validation:
        pulses = getValue(result, ['pulse_info', 'pulses'])
        if pulses:
            for pulse in pulses:
                if 'name' in pulse:
                    alerts.append('In pulse: ' + pulse['name'])

    return alerts



def url1(otx, url):
    alerts = []
    result = otx.get_indicator_details_full(IndicatorTypes.URL, url)

    google = getValue( result, ['url_list', 'url_list', 'result', 'safebrowsing'])
    if google and 'response_code' in str(google):
        alerts.append({'google_safebrowsing': 'malicious'})


    clamav = getValue( result, ['url_list', 'url_list', 'result', 'multiav','matches','clamav'])
    if clamav:
            alerts.append({'clamav': clamav})

    avast = getValue( result, ['url_list', 'url_list', 'result', 'multiav','matches','avast'])
    if avast:
        alerts.append({'avast': avast})

    # Get the file analysis too, if it exists
    has_analysis = getValue( result,  ['url_list','url_list', 'result', 'urlworker', 'has_file_analysis'])
    if has_analysis:
        hash = getValue( result,  ['url_list','url_list', 'result', 'urlworker', 'sha256'])
        file_alerts = file(otx, hash)
        if file_alerts:
            for alert in file_alerts:
                alerts.append(alert)

    # Todo: Check file page

    return alerts

def file(otx, hash):

    alerts = []

    hash_type = IndicatorTypes.FILE_HASH_MD5
    if len(hash) == 64:
        hash_type = IndicatorTypes.FILE_HASH_SHA256
    if len(hash) == 40:
        hash_type = IndicatorTypes.FILE_HASH_SHA1

    result = otx.get_indicator_details_full(hash_type, hash)

    avg = getValue( result, ['analysis','analysis','plugins','avg','results','detection'])
    if avg:
        alerts.append({'avg': avg})

    clamav = getValue( result, ['analysis','analysis','plugins','clamav','results','detection'])
    if clamav:
        alerts.append({'clamav': clamav})

    avast = getValue( result, ['analysis','analysis','plugins','avast','results','detection'])
    if avast:
        alerts.append({'avast': avast})

    microsoft = getValue( result, ['analysis','analysis','plugins','cuckoo','result','virustotal','scans','Microsoft','result'])
    if microsoft:
        alerts.append({'microsoft': microsoft})

    symantec = getValue( result, ['analysis','analysis','plugins','cuckoo','result','virustotal','scans','Symantec','result'])
    if symantec:
        alerts.append({'symantec': symantec})

    kaspersky = getValue( result, ['analysis','analysis','plugins','cuckoo','result','virustotal','scans','Kaspersky','result'])
    if kaspersky:
        alerts.append({'kaspersky': kaspersky})

    suricata = getValue( result, ['analysis','analysis','plugins','cuckoo','result','suricata','rules','name'])
    if suricata and 'trojan' in str(suricata).lower():
        alerts.append({'suricata': suricata})

    return alerts
# Your API key
API_KEY = '75ba4a2b23d77731e9890a9d1b548f4d99f80d132739c74c0d12af7839c2e02d'
OTX_SERVER = 'https://otx.alienvault.com/'
otx = OTXv2(API_KEY, server=OTX_SERVER)

parser = argparse.ArgumentParser(description='OTX CLI Example')
parser.add_argument('-ip', help='IP eg; 4.4.4.4', required=False)
parser.add_argument('-host',
                    help='Hostname eg; www.alienvault.com', required=False)
parser.add_argument(
    '-url', help='URL eg; http://www.alienvault.com', required=False)
parser.add_argument(
    '-hash', help='Hash of a file eg; 7b42b35832855ab4ff37ae9b8fa9e571', required=False)
parser.add_argument(
    '-file', help='Path to a file, eg; malware.exe', required=False)

args = vars(parser.parse_args())




def mal(u):  
    url = 'https://www.virustotal.com/vtapi/v2/url/report'
    params = {'apikey': 'c3ce7f072f8dd8effbf9f8c0e37f75f2aabdc7e197ed49051757bf0d0d0301db', 'resource':f'{u}'}
    
    response = requests.get(url, params=params)
    d=response.json()
    
    #print(response.json())
    #print(d['response_code'])
    #print(d)
    if(d['response_code']==0):
       alerts = get_malicious.url(otx,u)
       if len(alerts) > 0:
           emb = Embed(color=0xff0400)
           emb.title='Identified as potentially malicious'
           print('Identified as potentially malicious')
           emb.set_footer(text="Powered by Alienware OTX")
           return(emb)
          # print(str(alerts))
       else:
           print('Not identified as malicious')
           emb = Embed(color=0x00ff1e)
           emb.title='Not identified as malicious'
           emb.set_footer(text="Powered by Alienware OTX")
           return(emb)
    else:
        dreq=d['scans']
        k=0
        if(len(dreq)>6):
            ep=6
        else:
            ep=len(dreq)

        point=len(dreq)
        p1=point
        pb=''

        for i in dreq:
            k=k+1
            #print(i)
            if(k!=ep):
                if(str(dreq[i]['result']).count('clean site')>0):
                    point=point+0
                else:
                    point=point-1
                pb=pb+str(dreq[i])+' '
            else:
                break
        if(point==p1):
            print("Safe website")
            emb=Embed(color=0x00ff1e)
            emb.title='Safe website'
            emb.set_footer(text='Powered by '+ pb ,icon_url='')
            return(emb)
        else:
            print("Website has high chances of being malicious")
            emb=Embed(color=0xff0400)
            emb.title='Website has high chances of being malicious'
            emb.set_footer(text='Powered by ')
            return(emb)
d=mal('https://www.google.com/search?q=hex+color+picker&rlz=1C1CHBD_enIN907IN907&oq=hex+color+picker&aqs=chrome.0.35i39j0l7.3868j0j4&sourceid=chrome&ie=UTF-8')

#print()
#for i in d:
#    print(i,d[i]['result'])